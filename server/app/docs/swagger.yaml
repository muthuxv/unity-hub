basePath: /
definitions:
  models.BanSwagger:
    properties:
      banned_by:
        $ref: '#/definitions/models.UserSwagger'
      banned_by_id:
        type: string
      duration:
        type: string
      id:
        type: string
      reason:
        type: string
      server:
        $ref: '#/definitions/models.ServerSwagger'
      server_id:
        type: string
      user:
        $ref: '#/definitions/models.UserSwagger'
      user_id:
        type: string
    type: object
  models.ChangePasswordPayload:
    properties:
      currentPassword:
        type: string
      newPassword:
        minLength: 6
        type: string
    required:
    - currentPassword
    - newPassword
    type: object
  models.ChannelSwagger:
    properties:
      id:
        type: string
      name:
        type: string
      permission:
        type: string
      server_id:
        type: string
      type:
        type: string
    type: object
  models.ErrorServerResponse:
    properties:
      error:
        type: string
    type: object
  models.ErrorUserResponse:
    properties:
      error:
        type: string
    type: object
  models.FcmTokenPayload:
    properties:
      fcmToken:
        type: string
    required:
    - fcmToken
    type: object
  models.LoginPayload:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LogsSwagger:
    properties:
      id:
        type: string
      message:
        type: string
      server:
        $ref: '#/definitions/models.ServerSwagger'
      server_id:
        type: string
    type: object
  models.MediaSwagger:
    properties:
      file_name:
        type: string
      id:
        type: string
      mime_type:
        type: string
      user_id:
        type: string
    type: object
  models.OnServerSwagger:
    properties:
      id:
        type: string
      server:
        $ref: '#/definitions/models.ServerSwagger'
      server_id:
        type: string
      user:
        $ref: '#/definitions/models.UserSwagger'
      user_id:
        type: string
    type: object
  models.ServerSwagger:
    properties:
      id:
        type: string
      media:
        $ref: '#/definitions/models.MediaSwagger'
      media_id:
        type: string
      name:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.TagSwagger'
        type: array
      user_id:
        type: string
      visibility:
        type: string
    type: object
  models.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.SuccessServerResponse:
    properties:
      message:
        type: string
    type: object
  models.TagSwagger:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.TokenResponse:
    properties:
      token:
        type: string
    type: object
  models.UpdateUserDataPayload:
    properties:
      profile:
        type: string
      pseudo:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      fcmToken:
        type: string
      id:
        type: string
      isVerified:
        type: boolean
      password:
        type: string
      profile:
        type: string
      provider:
        type: string
      providerID:
        type: string
      pseudo:
        type: string
      role:
        type: string
      updated_at:
        type: string
      verificationToken:
        type: string
    type: object
  models.UserSwagger:
    properties:
      created_at:
        type: string
      email:
        type: string
      fcm_token:
        type: string
      id:
        type: string
      is_verified:
        type: boolean
      profile:
        type: string
      provider:
        type: string
      provider_id:
        type: string
      pseudo:
        type: string
      role:
        type: string
      updated_at:
        type: string
      verification_token:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Cette API permet d'interagir avec le projet Go.
  title: Swagger API pour le projet Go
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login a user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
      summary: Login a user
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and pseudo
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
      summary: Register a new user
      tags:
      - auth
  /servers:
    get:
      description: Get all servers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ServerSwagger'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Get all servers
      tags:
      - servers
    post:
      consumes:
      - application/json
      description: Create a new server with specified details
      parameters:
      - description: Server details
        in: body
        name: server
        required: true
        schema:
          $ref: '#/definitions/models.ServerSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ServerSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Create a new server
      tags:
      - servers
  /servers/{id}:
    delete:
      description: Delete a specific server by ID
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessServerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Delete server by ID
      tags:
      - servers
    get:
      description: Get details of a specific server by ID
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ServerSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Get a server by ID
      tags:
      - servers
  /servers/{id}/bans:
    get:
      description: Get all bans for a specific server
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BanSwagger'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Get server bans
      tags:
      - servers
  /servers/{id}/channels:
    get:
      description: Get all channels of a specific server
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.ChannelSwagger'
              type: array
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Get server channels
      tags:
      - servers
  /servers/{id}/kick/{userID}:
    delete:
      consumes:
      - application/json
      description: Kick a user from a specific server
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessServerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Kick a user from a server
      tags:
      - servers
  /servers/{id}/logs:
    get:
      description: Get all logs of a specific server
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LogsSwagger'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Get server logs
      tags:
      - servers
  /servers/{id}/members:
    get:
      description: Get all members of a specific server
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Get server members
      tags:
      - servers
  /servers/{id}/unban/{userID}:
    delete:
      consumes:
      - application/json
      description: Unban a user from a specific server
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessServerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Unban a user from a server
      tags:
      - servers
  /servers/friend/{friendID}:
    get:
      description: Get servers that a specific friend is not a member of
      parameters:
      - description: Friend ID
        in: path
        name: friendID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ServerSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Get servers friend is not in
      tags:
      - servers
  /servers/join/{id}:
    post:
      consumes:
      - application/json
      description: Join a specific server by ID
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OnServerSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Join a server
      tags:
      - servers
  /servers/leave/{id}:
    delete:
      consumes:
      - application/json
      description: Leave a specific server by ID
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OnServerSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Leave a server
      tags:
      - servers
  /servers/public/{id}:
    get:
      description: Get all public servers that a user is not a member of
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ServerSwagger'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Get public available servers
      tags:
      - servers
  /servers/search:
    get:
      description: Search for servers by name
      parameters:
      - description: Server name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ServerSwagger'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Search servers by name
      tags:
      - servers
  /servers/user/{id}:
    get:
      description: Get all servers that a specific user is a member of
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ServerSwagger'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorServerResponse'
      summary: Get servers by user ID
      tags:
      - servers
  /user/{id}:
    put:
      consumes:
      - application/json
      description: Update the data of an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserDataPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
      summary: Update user data
      tags:
      - user
  /user/{id}/password:
    put:
      consumes:
      - application/json
      description: Change the password of an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Password info
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
      summary: Change user password
      tags:
      - user
  /user/fcm-token:
    post:
      consumes:
      - application/json
      description: Register a Firebase Cloud Messaging token for push notifications
      parameters:
      - description: FCM token
        in: body
        name: fcmToken
        required: true
        schema:
          $ref: '#/definitions/models.FcmTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
      summary: Register FCM token
      tags:
      - user
  /verify/{token}:
    get:
      consumes:
      - application/json
      description: Verify a user account using the verification token
      parameters:
      - description: Verification token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorUserResponse'
      summary: Verify a user account
      tags:
      - auth
swagger: "2.0"
